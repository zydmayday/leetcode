/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
    const dict1 = {}; // 横排数组
    const dict2 = {}; // 竖排数组
    const dict3 = {}; // 方格数组
    for (let i = 0; i < 9; i++) {
        dict1[i] = [];
        dict2[i] = [];
        dict3[i] = [];
    }
    for (let i = 0; i < board.length; i++) {
        const row = board[i];
        for (let j = 0; j < row.length; j++) {
            const num = row[j];
            if (num === '.') continue;
            const k1 = i;
            const k2 = j;
            const k3 = parseInt(parseInt(i / 3) * 3) + (parseInt(j / 3) % 3);
            if (dict1[k1].includes(num) || dict2[k2].includes(num) || dict3[k3].includes(num)) return false;
            dict1[k1].push(num);
            dict2[k2].push(num);
            dict3[k3].push(num);
        }
    }
    return true;
};

console.log(isValidSudoku([
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]));

console.log(isValidSudoku([
    ["8","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]));